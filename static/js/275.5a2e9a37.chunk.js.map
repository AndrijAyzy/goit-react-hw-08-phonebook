{"version":3,"file":"static/js/275.5a2e9a37.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm.styled.js","components/Phonebook/ContactForm.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/pages/PhonebookPage/PhonebookPage.jsx"],"sourcesContent":["import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  margin-left: 20px;\n  margin-bottom: 1px;\n  label {\n    display: block;\n    margin-bottom: 2px;\n    font-size: 24px;\n    margin-left: 4px;\n  }\n  input {\n    display: block;\n    font-size: 20px;\n    width: 300px;\n    height: 40px;\n    margin-bottom: 8px;\n    border: 1px solid black;\n    border-radius: 4px;\n  }\n\n`;","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContactThunk } from 'redux/thunks';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Formik, Field, Form } from 'formik';\nimport { Button, FormLabel } from '@chakra-ui/react';\nimport { StyledForm } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContacts);\n\n  const notify = useCallback(() => {\n    toast.success('Contact was successfully added to your phonebook list.');\n  }, []);\n\n  const submitForm = useCallback(\n    ({ name, number }, { resetForm }) => {\n      const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n\n      const contactExists = items.some(contact => contact.name === capitalizedName);\n\n      if (contactExists) {\n        alert(`${capitalizedName} is already in contacts`);\n        return;\n      } else {\n        dispatch(addContactThunk({ name: capitalizedName, number }))\n          .unwrap()\n          .then(() => {\n            notify();\n            resetForm();\n          })\n          .catch(error => {\n            console.error('Error adding contact:', error);\n            // Тут ви можете вивести повідомлення про помилку користувачеві\n          });\n      }\n    },\n    [dispatch, items, notify]\n  );\n\n  return (\n    <>\n      <Toaster />\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        onSubmit={submitForm}\n      >\n        {props => (\n          <StyledForm as={Form}>\n            <FormLabel htmlFor=\"name\">Name</FormLabel>\n            <Field\n              id=\"name\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <FormLabel htmlFor=\"number\">Number</FormLabel>\n            <Field\n              id=\"number\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <Button colorScheme=\"green\" size=\"sm\" type=\"submit\" ml={5} width={400} mt={10} mb={10}>\n              Add contact\n            </Button>\n          </StyledForm>\n        )}\n      </Formik>\n    </>\n  );\n};\n","export const NotificationMessage = () => {\n    return (\n        <div style={{ marginLeft: '30px' }}>\n            You don't have any contact\n        </div>\n    )\n}","import styled from 'styled-components';\n\nexport const FilterSection = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 250px;\n  label {\n    font-size: 20px;\n    display: block;\n    margin-bottom: 12px;\n    margin-left: 20px;\n  }\n  input {\n    width: 350px;\n    height: 25px;\n    margin-bottom: 12px;\n    font-size: 16px;\n    border: 1px solid black;\n    border-radius: 4px;\n  }\n`;","import { NotificationMessage } from '../NotificationMessage/NotificationMessage';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { filterContacts } from 'redux/filtersSlice';\nimport { FilterSection } from './Filter.styled';\n\nexport const Filter = () => {\n  const { items: contacts} = useSelector(getContacts)\n  const dispatch = useDispatch()\n\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value.toLowerCase().trim()));\n  }\n\n  return contacts.length !== 0 ? (\n    <FilterSection>\n      <label>Filter\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterChange}\n              />\n        </label>\n    </FilterSection>\n  ) : (\n    <NotificationMessage />\n  );\n};","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  font-size: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  padding-bottom: 10px;  \n\n  li {\n    max-width: 465px;\n    height: auto;\n    display: flex;\n    justify-content: space-between;\n\n  }\n\n\n`;  \n\nexport const Button = styled.ul`\nbackground: #000000;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport {  getFilteredContacts } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { delContactThunk, getAllContactsThunk } from 'redux/thunks';\nimport { toast } from 'react-hot-toast';\nimport { Button, Text } from '@chakra-ui/react';\nimport { ContactsList } from './ContactList.styled';\n\n\nexport const ContactList = () => {\n  const notify = () =>\n    toast.error('Contact was successfully deleted from your contacts list.');\n  const dispatch = useDispatch()\n  const filteredContacts = useSelector(getFilteredContacts)\n\n  useEffect(() => {\n    dispatch(getAllContactsThunk())\n  }, [dispatch])\n\n  const handleDeleteContact = id => {\n    dispatch(delContactThunk(id))\n      .unwrap()\n      .then(() => {\n        notify();\n      });\n  };\n\n  return (\n    <ContactsList>\n      {filteredContacts?.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            <Text as='samp' fontSize='xl' ml={5} fontWeight='500' textTransform='capitalize'>\n              {name}: {number}\n            </Text>\n            <Button size='sm' colorScheme='red' type=\"button\" onClick={() => handleDeleteContact(id)}>\n              Delete\n            </Button>\n          </li>\n        );\n      })}\n    </ContactsList>\n  );\n};\n\n","import { ContactForm } from '../../Phonebook/ContactForm';\nimport { Filter } from '../../Filter/Filter';\nimport { ContactList } from '../../ContactList/ContactList';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { Box, Container, Text } from '@chakra-ui/react';\n\nconst PhonebookPage = () => {\n  const { isLoading, error } = useSelector(getContacts);\n  return (\n    <Container>\n      <Box bgColor='#0fd3ff' borderRadius={4}>\n      <Text as='n' fontSize='4xl' ml={150} fontWeight='700'>Phonebook</Text>\n      <ContactForm />\n      </Box>\n      <Box bgColor='#ffffff' borderRadius={4}>\n      <Text as='n' fontSize='4xl' ml={170} fontWeight='600'>Contacts</Text>\n      {isLoading && <div style={{marginLeft: '30px'}}>Loading...</div>}\n      {error && <div>{error.message}</div>}\n      <Filter />\n      <ContactList />\n      </Box>\n    </Container>\n  );\n};\n\nexport default PhonebookPage"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","ContactForm","dispatch","useDispatch","items","useSelector","getContacts","notify","useCallback","toast","submitForm","_ref","_ref2","name","number","resetForm","capitalizedName","charAt","toUpperCase","slice","some","contact","alert","concat","addContactThunk","unwrap","then","catch","error","console","_jsxs","_Fragment","children","_jsx","Toaster","Formik","initialValues","onSubmit","props","as","FormLabel","htmlFor","Field","id","type","pattern","title","required","Button","colorScheme","size","ml","width","mt","mb","NotificationMessage","style","marginLeft","FilterSection","Filter","contacts","length","onChange","e","filterContacts","target","value","toLowerCase","trim","ContactsList","ContactList","_templateObject2","filteredContacts","getFilteredContacts","useEffect","getAllContactsThunk","handleDeleteContact","delContactThunk","map","Text","fontSize","fontWeight","textTransform","onClick","_useSelector","isLoading","Container","Box","bgColor","borderRadius","message"],"sourceRoot":""}