{"version":3,"file":"static/js/275.641892e2.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm.styled.js","components/Phonebook/ContactForm.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/pages/PhonebookPage/PhonebookPage.jsx"],"sourcesContent":["import { Form } from 'formik';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledForm = styled(Form)`\r\n  margin-left: 20px;\r\n  margin-bottom: 1px;\r\n  label {\r\n    display: block;\r\n    margin-bottom: 2px;\r\n    font-size: 24px;\r\n    margin-left: 4px;\r\n  }\r\n  input {\r\n    display: block;\r\n    font-size: 20px;\r\n    width: 300px;\r\n    height: 40px;\r\n    margin-bottom: 8px;\r\n    border: 1px solid black;\r\n    border-radius: 4px;\r\n  }\r\n\r\n`;","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContacts } from 'redux/selectors';\r\nimport { addContactThunk } from 'redux/thunks';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport { Button, FormLabel } from '@chakra-ui/react';\r\nimport { StyledForm } from './ContactForm.styled';\r\n\r\nexport const ContactForm = () => {\r\n  const notify = () =>\r\n    toast.success('Contact was successfully added to your phonebook list.');\r\n\r\n  const dispatch = useDispatch();\r\n  const { items } = useSelector(getContacts);\r\n\r\n  const submitForm = useCallback(\r\n    ({ name, number }, { resetForm }) => {\r\n      // Перетворення першої букви імені на велику\r\n      const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\r\n\r\n      const contactExists = items.some(contact => contact.name === capitalizedName);\r\n\r\n      if (contactExists) {\r\n        alert(`${capitalizedName} is already in contacts`);\r\n        return;\r\n      } else {\r\n        dispatch(addContactThunk({ name: capitalizedName, number }))\r\n          .unwrap()\r\n          .then(() => {\r\n            notify();\r\n            resetForm();\r\n          })\r\n          .catch(error => {\r\n            console.error('Error adding contact:', error);\r\n            // Тут ви можете вивести повідомлення про помилку користувачеві\r\n          });\r\n      }\r\n    },\r\n    [dispatch, items, notify]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Toaster />\r\n      <Formik\r\n        initialValues={{\r\n          name: '',\r\n          number: '',\r\n        }}\r\n        onSubmit={submitForm}\r\n      >\r\n        {props => (\r\n          <StyledForm as={Form}>\r\n            <FormLabel htmlFor=\"name\">Name</FormLabel>\r\n            <Field\r\n              id=\"name\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n            />\r\n            <FormLabel htmlFor=\"number\">Number</FormLabel>\r\n            <Field\r\n              id=\"number\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n            />\r\n            <Button colorScheme=\"green\" size=\"sm\" type=\"submit\" ml={5} width={400} mt={10} mb={10}>\r\n              Add contact\r\n            </Button>\r\n          </StyledForm>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n","export const NotificationMessage = () => {\r\n    return (\r\n        <div style={{ marginLeft: '30px' }}>\r\n            You don't have any contact\r\n        </div>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const FilterSection = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 250px;\r\n  label {\r\n    font-size: 20px;\r\n    display: block;\r\n    margin-bottom: 12px;\r\n    margin-left: 20px;\r\n  }\r\n  input {\r\n    width: 350px;\r\n    height: 25px;\r\n    margin-bottom: 12px;\r\n    font-size: 16px;\r\n    border: 1px solid black;\r\n    border-radius: 4px;\r\n  }\r\n`;","import { NotificationMessage } from '../NotificationMessage/NotificationMessage';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getContacts } from 'redux/selectors';\r\nimport { filterContacts } from 'redux/filtersSlice';\r\nimport { FilterSection } from './Filter.styled';\r\n\r\nexport const Filter = () => {\r\n  const { items: contacts} = useSelector(getContacts)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleFilterChange = e => {\r\n    dispatch(filterContacts(e.target.value.toLowerCase().trim()));\r\n  }\r\n\r\n  return contacts.length !== 0 ? (\r\n    <FilterSection>\r\n      <label>Filter\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        onChange={handleFilterChange}\r\n              />\r\n        </label>\r\n    </FilterSection>\r\n  ) : (\r\n    <NotificationMessage />\r\n  );\r\n};","import styled from 'styled-components';\r\n\r\nexport const ContactsList = styled.ul`\r\n  font-size: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n  padding-bottom: 10px;  \r\n\r\n  li {\r\n    max-width: 465px;\r\n    height: auto;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n  }\r\n\r\n\r\n`;  \r\n\r\nexport const Button = styled.ul`\r\nbackground: #000000;\r\n`;","import { useDispatch, useSelector } from 'react-redux';\r\nimport {  getFilteredContacts } from 'redux/selectors';\r\nimport { useEffect } from 'react';\r\nimport { delContactThunk, getAllContactsThunk } from 'redux/thunks';\r\nimport { toast } from 'react-hot-toast';\r\nimport { Button, Text } from '@chakra-ui/react';\r\nimport { ContactsList } from './ContactList.styled';\r\n\r\n\r\nexport const ContactList = () => {\r\n  const notify = () =>\r\n    toast.error('Contact was successfully deleted from your contacts list.');\r\n  const dispatch = useDispatch()\r\n  const filteredContacts = useSelector(getFilteredContacts)\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllContactsThunk())\r\n  }, [dispatch])\r\n\r\n  const handleDeleteContact = id => {\r\n    dispatch(delContactThunk(id))\r\n      .unwrap()\r\n      .then(() => {\r\n        notify();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ContactsList>\r\n      {filteredContacts?.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id}>\r\n            <Text as='samp' fontSize='xl' ml={5} fontWeight='500' textTransform='capitalize'>\r\n              {name}: {number}\r\n            </Text>\r\n            <Button size='sm' colorScheme='red' type=\"button\" onClick={() => handleDeleteContact(id)}>\r\n              Delete\r\n            </Button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ContactsList>\r\n  );\r\n};\r\n\r\n","import { ContactForm } from '../../Phonebook/ContactForm';\r\nimport { Filter } from '../../Filter/Filter';\r\nimport { ContactList } from '../../ContactList/ContactList';\r\nimport { useSelector } from 'react-redux';\r\nimport { getContacts } from 'redux/selectors';\r\nimport { Box, Container, Text } from '@chakra-ui/react';\r\n\r\nconst PhonebookPage = () => {\r\n  const { isLoading, error } = useSelector(getContacts);\r\n  return (\r\n    <Container>\r\n      <Box bgColor='#0fd3ff' borderRadius={4}>\r\n      <Text as='n' fontSize='4xl' ml={150} fontWeight='700'>Phonebook</Text>\r\n      <ContactForm />\r\n      </Box>\r\n      <Box bgColor='#ffffff' borderRadius={4}>\r\n      <Text as='n' fontSize='4xl' ml={170} fontWeight='600'>Contacts</Text>\r\n      {isLoading && <div style={{marginLeft: '30px'}}>Loading...</div>}\r\n      {error && <div>{error.message}</div>}\r\n      <Filter />\r\n      <ContactList />\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PhonebookPage"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","ContactForm","notify","toast","dispatch","useDispatch","items","useSelector","getContacts","submitForm","useCallback","_ref","_ref2","name","number","resetForm","capitalizedName","charAt","toUpperCase","slice","some","contact","alert","concat","addContactThunk","unwrap","then","catch","error","console","_jsxs","_Fragment","children","_jsx","Toaster","Formik","initialValues","onSubmit","props","as","FormLabel","htmlFor","Field","id","type","pattern","title","required","Button","colorScheme","size","ml","width","mt","mb","NotificationMessage","style","marginLeft","FilterSection","Filter","contacts","length","onChange","e","filterContacts","target","value","toLowerCase","trim","ContactsList","ContactList","_templateObject2","filteredContacts","getFilteredContacts","useEffect","getAllContactsThunk","handleDeleteContact","delContactThunk","map","Text","fontSize","fontWeight","textTransform","onClick","_useSelector","isLoading","Container","Box","bgColor","borderRadius","message"],"sourceRoot":""}